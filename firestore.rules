rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read any profile (public data), but only write their own
    match /users/{userId} {
      allow read: if true; // Allow public read access
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Username uniqueness check - allow public read for checking availability
    match /usernames/{username} {
      allow read: if true; // Allow public read access
      allow write: if request.auth != null; // Only authenticated users can create usernames
    }
    
    // Posts can be read by anyone, written by authenticated users
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true));
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true));
    }
    
    // Communities can be read by anyone, created by authenticated users
    match /communities/{communityId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.creatorId || 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberCount']) ||
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true));
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.creatorId || 
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true));
    }
    
    // Community memberships - users can read their own memberships and join/leave communities
    match /communityMembers/{membershipId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Comments can be read by anyone, written by authenticated users
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true));
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true));
    }
    
    // Tokens can be read by anyone, created by authenticated users
    match /tokens/{tokenId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Admin data - only accessible by admin users
    match /admin/{docId} {
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

  }
} 